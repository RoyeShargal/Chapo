{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/MyProjects/Chapo/client/src/components/Post/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./post.css\";\nimport React, { useEffect, useState } from \"react\";\nimport httpClient from \"../../httpClient\";\nimport { Link } from \"react-router-dom\";\nimport * as http from \"http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Post({\n  aSinglePost\n}) {\n  _s();\n\n  const [user, setUser] = useState('');\n  const [comments, setComments] = useState([]);\n  const postID = aSinglePost.id;\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await httpClient.get(\"//127.0.0.1:5000/@me\");\n        setUser(resp.data);\n      } catch (e) {\n        console.log(\"Not Authenticated.\");\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    (async () => {\n      try {\n        const listOfComments = await httpClient.post(\"//127.0.0.1:5000/comments\", {\n          postID\n        });\n        setComments(listOfComments.data);\n      } catch (e) {\n        console.log(\"no comments\");\n      }\n    })();\n  }, []);\n  let postId = aSinglePost.id;\n\n  const deletePost = async () => {\n    if (window.confirm(\"Delete?\")) {\n      await httpClient.post(\"//127.0.0.1:5000/deletepost\", {\n        postId\n      });\n      window.location.reload(2);\n      forceUpdate();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"postTitle\",\n        children: aSinglePost.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"postDate\",\n        children: [\"Created by \", aSinglePost.authorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"postContent\",\n        children: [aSinglePost.content, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"postDate\",\n        children: aSinglePost.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), aSinglePost.authorId == user.id ? /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"far fa-trash-alt deletebtn\",\n        onClick: deletePost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 53\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 22\n      }, this), comments.map(comment => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"postDate\",\n          children: [comment.content, \" by \", comment.authorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Post, \"DMjWzTa517sri9tWThyO4Yt/d08=\");\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/royeshargal/MyProjects/Chapo/client/src/components/Post/Post.jsx"],"names":["React","useEffect","useState","httpClient","Link","http","Post","aSinglePost","user","setUser","comments","setComments","postID","id","resp","get","data","e","console","log","listOfComments","post","postId","deletePost","window","confirm","location","reload","forceUpdate","title","authorName","content","date","authorId","map","comment"],"mappings":"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","sourcesContent":["import \"./post.css\"\nimport React, {useEffect, useState} from \"react\";\nimport httpClient from \"../../httpClient\";\nimport {Link} from \"react-router-dom\";\nimport * as http from \"http\";\nexport default function Post({aSinglePost})\n{\n    const [user,setUser] = useState( '')\n\n\n    const [comments,setComments] = useState([])\n    const postID = aSinglePost.id\n\n    useEffect(()=>{\n        (async () => {\n            try {\n                const resp = await httpClient.get(\"//127.0.0.1:5000/@me\");\n                setUser(resp.data);\n            }\n            catch (e){\n                console.log(\"Not Authenticated.\")\n            }\n        })();\n    },[])\n    useEffect( () => {\n        (async () => {\n            try{\n                const listOfComments = await httpClient.post(\"//127.0.0.1:5000/comments\", {\n                    postID\n                })\n                setComments(listOfComments.data)\n            }\n            catch(e){\n                console.log(\"no comments\")\n            }\n        })();\n    },[])\n    let postId = aSinglePost.id\n\n    const deletePost = async  () => {\n        if (window.confirm(\"Delete?\")) {\n            await httpClient.post(\"//127.0.0.1:5000/deletepost\",{\n                postId\n            });\n            window.location.reload(2);\n            forceUpdate()\n\n\n        }\n    }\n    return(\n        <div className=\"post\">\n\n            <div className=\"postItem\">\n                <span className=\"postTitle\" >{aSinglePost.title}</span>\n                <span className=\"postDate\">Created by {aSinglePost.authorName}</span>\n                <p className={\"postContent\"}>{aSinglePost.content} </p>\n                <p className={\"postDate\"}>{aSinglePost.date}</p>\n                {aSinglePost.authorId == user.id ? (<i className=\"far fa-trash-alt deletebtn\" onClick={deletePost}></i>)\n                    :\n                    (<p></p>)}\n                {/*{aSinglePost.likes>0 ? (<p className={\"likes far fa-heart \"} > {aSinglePost.likes}</p>*/}\n                {/*):(<p></p>)}*/}\n\n\n\n                {comments.map((comment) => {\n                    return(\n                        <p className={\"postDate\"}>\n\n                            {comment.content} by {comment.authorName}\n                        </p>\n                    )\n                })}\n\n\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}